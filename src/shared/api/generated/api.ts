/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Mock Activities API
 * A simple mock server for activities and favorites
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import { customInstance } from '../config/baseApi'
export type GetActivities200Item = {
  id?: number
  photoUrl?: string
  name?: string
  description?: string
  location?: string
  price?: number
  rating?: number
}

export type PostFavoritesBody = {
  id: number
}

export type PostFavorites200 = {
  message?: string
}

export type PostFavorites400 = {
  error?: string
}

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @summary Get all activities
 */
export const getActivities = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetActivities200Item[]>(
    { url: `/activities`, method: 'GET', signal },
    options,
  )
}

export const getGetActivitiesQueryKey = () => {
  return [`/activities`] as const
}

export const getGetActivitiesQueryOptions = <
  TData = Awaited<ReturnType<typeof getActivities>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getActivities>>,
    TError,
    TData
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetActivitiesQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getActivities>>> = ({
    signal,
  }) => getActivities(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getActivities>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetActivitiesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getActivities>>
>
export type GetActivitiesQueryError = unknown

/**
 * @summary Get all activities
 */

export function useGetActivities<
  TData = Awaited<ReturnType<typeof getActivities>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getActivities>>,
    TError,
    TData
  >
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetActivitiesQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Add an activity to favorites
 */
export const postFavorites = (
  postFavoritesBody: PostFavoritesBody,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PostFavorites200>(
    {
      url: `/favorites`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: postFavoritesBody,
      signal,
    },
    options,
  )
}

export const getPostFavoritesMutationOptions = <
  TError = PostFavorites400,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postFavorites>>,
    TError,
    { data: PostFavoritesBody },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof postFavorites>>,
  TError,
  { data: PostFavoritesBody },
  TContext
> => {
  const mutationKey = ['postFavorites']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postFavorites>>,
    { data: PostFavoritesBody }
  > = props => {
    const { data } = props ?? {}

    return postFavorites(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostFavoritesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postFavorites>>
>
export type PostFavoritesMutationBody = PostFavoritesBody
export type PostFavoritesMutationError = PostFavorites400

/**
 * @summary Add an activity to favorites
 */
export const usePostFavorites = <
  TError = PostFavorites400,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postFavorites>>,
    TError,
    { data: PostFavoritesBody },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof postFavorites>>,
  TError,
  { data: PostFavoritesBody },
  TContext
> => {
  const mutationOptions = getPostFavoritesMutationOptions(options)

  return useMutation(mutationOptions)
}
